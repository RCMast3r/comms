/// @page page_message_options Parsed Message Options
/// @tableofcontents
/// @section page_message_options_interface Interface Options
/// The comms::Message class is used to define common interface for all the
/// custom protocol messages. The class receives various options from
/// comms::option namespace and defines its interface functions accordingly.
/// The comms::Message class also defines @b InterfaceOptions internal type
/// which summarises the provided options into meta-programming friendly
/// structure.
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... InterfaceOptions;
/// };
///
/// } // namespace comms
/// @endcode
///
/// The @b InterfaceOptions struct defines the following static const boolean
/// variables:
/// @code
/// struct InterfaceOptions
/// {
///     static const bool HasMsgIdType = ...;
///     static const bool HasEndian = ...;
///     static const bool HasReadIterator = ...;
///     static const bool HasWriteIterator = ...;
///     static const bool HasHandler = ...;
///     static const bool HasValid = ...;
///     static const bool HasLength = ...;
///     static const bool HasRefresh = ...;
/// };
/// @endcode
///
/// Every such boolean value provides an information about available interface
/// functions and/or types.
///
/// @subsection page_message_options_interface_id Message ID
/// If @b HasMsgIdType of comms::Message::InterfaceOptions is @b true, then the
/// following types and functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... MsgIdType;
///     typedef ... MsgIdParamType;
///
///     MsgIdParamType getId() const;
///
/// protected:
///     virtual MsgIdParamType getIdImpl() const = 0;
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasMsgIdType value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::MsgIdType option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_endian Serialisation Endian
/// If @b HasEndian of comms::Message::InterfaceOptions is @b true, then the
/// following types and functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... Endian;
///     typedef ... Field;
///
/// protected:
///     template <typename T, typename TIter>
///     static void writeData(T value, TIter& iter);
///
///     template <std::size_t TSize, typename T, typename TIter>
///     static void writeData(T value, TIter& iter);
///
///     template <typename T, typename TIter>
///     static T readData(TIter& iter);
///
///     template <typename T, std::size_t TSize, typename TIter>
///     static T readData(TIter& iter);
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasEndian value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::BigEndian or comms::option::LittleEndian option is 
/// provided to comms::Message class.
///
/// @subsection page_message_options_interface_read Read Operation
/// If @b HasReadIterator of comms::Message::InterfaceOptions is @b true, then the
/// following types and functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... ReadIterator;
///
///     ErrorStatus read(ReadIterator& iter, std::size_t size);
///
/// protected:
///     virtual ErrorStatus readImpl(ReadIterator& iter, std::size_t size)
///     {
///         return ErrorStatus::NotSupported;
///     }
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasReadIterator value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::ReadIterator option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_write Write Operation
/// If @b HasWriteIterator of comms::Message::InterfaceOptions is @b true, then the
/// following types and functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... WriteIterator;
///
///     ErrorStatus write(WriteIterator& iter, std::size_t size) const;
///
/// protected:
///     virtual ErrorStatus writeImpl(WriteIterator& iter, std::size_t size) const
///     {
///         return ErrorStatus::NotSupported;
///     }
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasWriteIterator value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::WriteIterator option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_handler Dispatching to Handler
/// If @b HasHandler of comms::Message::InterfaceOptions is @b true, then the
/// following types and functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     typedef ... Handler;
///
///     void dispatch(Handler& handler);
///
/// protected:
///     virtual void dispatchImpl(Handler& handler) = 0;
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasHandler value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::Handler option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_valid Validity Check
/// If @b HasValid of comms::Message::InterfaceOptions is @b true, then the
/// following functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     bool valid() const;
///
/// protected:
///     virtual bool validImpl() const
///     {
///         return true;
///     }
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasValid value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::ValidCheckInterface option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_length Serialisation Length
/// If @b HasLength of comms::Message::InterfaceOptions is @b true, then the
/// following functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     std::size_t length() const;
///
/// protected:
///     virtual std::size_t lengthImpl() const = 0;
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasLength value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::LengthInfoInterface option is provided to comms::Message class.
///
/// @subsection page_message_options_interface_refresh Refresh Operation
/// If @b HasRefresh of comms::Message::InterfaceOptions is @b true, then the
/// following functions are defined and can be used:
/// @code
/// namespace comms
/// {
///
/// template <typename... TOptions>
/// class Message
/// {
/// public:
///     bool refresh();
///
/// protected:
///     virtual bool refreshImpl()
///     {
///         return false;
///     }
/// };
///
/// } // namespace comms
/// @endcode
/// The @b HasRefresh value of comms::Message::InterfaceOptions is set to @b true
/// when comms::option::RefreshInterface option is provided to comms::Message class.
///
/// @section page_message_options_impl Implementation Options
/// The comms::MessageBase class is used to provide default implementation for
/// various virtual functions defined in the comms::Message interface class. 
/// it receives various options from
/// comms::option namespace and implements the virtual functions when possible. @n
/// The comms::MessageBase class defines @b ImplOptions internal type
/// which summarises the provided options into meta-programming friendly
/// structure.
/// @code
/// namespace comms
/// {
///
/// template <typename TMessage, typename... TOptions>
/// class MessageBase : public TMessage
/// {
/// public:
///     typedef ... ImplOptions;
/// };
///
/// } // namespace comms
/// @endcode
///
/// The @b ImplOptions struct defines the following static const boolean variables: 
/// @code
/// struct ImplOptions
/// {
///     static const bool HasStaticMsgId = ...;
///     static const bool HasNoIdImpl = ...;
///     static const bool HasMsgType = ...;
///     static const bool HasFieldsImpl = ...;
///     static const bool HasNoReadImpl = ...;
///     static const bool HasNoWriteImpl = ...;
///     static const bool HasNoLengthImpl = ...;
///     static const bool HasNoValidImpl = ...;
///     static const bool HasDoRefresh = ...;
/// };
/// @endcode
/// Every such boolean value provides an information about whether the default
/// implementation was provided to a relevant virtual function defined in the
/// interface.
///
/// @subsection page_message_options_impl_id Message ID
/// The @b HasStaticMsgId value of comms::MessageBase::ImplOptions is set to @b true
/// when comms::option::StaticNumIdImpl option is provided to comms::MessageBase class. @n
///
/// If of @b HasStaticMsgId value equals to @b true, 
/// then the comms::MessageBase::ImplOptions has the following additional definition:
/// @code
/// struct ImplOptions
/// {
///     static const MsgIdType MsgId = ...;
///     ...
/// };
/// @endcode
///
/// The @b HasNoIdImpl value of comms::MessageBase::ImplOptions is set to @b true
/// when comms::option::NoIdImpl option is provided to comms::MessageBase class. @n
///
/// @subsection page_message_options_msg_type Message Type
/// Some @b *Impl() functions (such as dispatchImpl()) may require knowledge about
/// actual message class, that inherits from comms::MessageBase. Usage of
/// comms::option::MsgType option will provide such knowledge and will set
/// @b HasMsgType value of comms::MessageBase::ImplOptions to @b true as well as
/// define the following internal type:
/// @code
/// struct ImplOptions
/// {
///     typedef ... MsgType;
///     ...
/// };
/// @endcode
///
///
/// @subsection page_message_options_impl_inhibit Inhibiting Polymorphic Implementation Functions
/// The usage of comms::option::NoDispatchImpl will set the @b HasNoDispatchImpl value
/// in comms::MessageBase::ImplOptions to @b true
///
/// The usage of comms::option::NoReadImpl will set the @b HasNoReadImpl value
/// in comms::MessageBase::ImplOptions to @b true.
///
/// The usage of comms::option::NoWriteImpl will set the @b HasNoWriteImpl value
/// in comms::MessageBase::ImplOptions to @b true.
///
/// The usage of comms::option::NoLengthImpl will set the @b HasNoLengthImpl value
/// in comms::MessageBase::ImplOptions to @b true.
///
/// The usage of comms::option::NoValidImpl will set the @b HasNoValidImpl value
/// in comms::MessageBase::ImplOptions to @b true.
///
/// @subsection page_message_options_impl_refresh Support for Custom Refresh
/// The usage of comms::option::HasDoRefresh will set the @b HasDoRefresh value
/// in comms::MessageBase::ImplOptions to @b true.
/// 




